import com.amazonaws.auth.AWSCredentials
import com.amazonaws.auth.DefaultAWSCredentialsProviderChain
import jp.classmethod.aws.gradle.lambda.AWSLambdaUpdateFunctionCodeTask
import jp.classmethod.aws.gradle.lambda.S3File
import jp.classmethod.aws.gradle.s3.AmazonS3FileUploadTask

plugins {
	id 'java'
	id 'jp.classmethod.aws.s3' version '0.35'
	id 'jp.classmethod.aws.lambda' version '0.35'
}

group 'psu.edu.unifiedapi'
version '1.0-SNAPSHOT'


sourceCompatibility = 1.8

ext.aws_java_sdk_lambda = 'com.amazonaws:aws-java-sdk-lambda:1.11.226'
ext.aws_lambda_java_core = 'com.amazonaws:aws-lambda-java-core:1.2.0'
ext.aws_java_sdk_cognitoidp = 'com.amazonaws:aws-java-sdk-cognitoidp:1.11.271'
ext.postgresql = 'org.postgresql:postgresql:42.1.4'
ext.commons_email = 'org.apache.commons:commons-email:1.5'
ext.jsoup = 'org.jsoup:jsoup:1.11.2'
ext.alexa_skills_kit = 'com.amazon.alexa:alexa-skills-kit:1.6.0'
ext.psuapi = 'edu.pennstate.api:PennStateUnified:1.0-SNAPSHOT'
ext.reflections = 'org.reflections:reflections:0.9.11'
ext.http_client = 'com.google.http-client:google-http-client-jackson2:1.22.0'
ext.authcanvas = 'com.google.api-client:google-api-client:1.23.0'

subprojects {
	apply plugin: 'java'

	repositories {
		mavenCentral()
		maven {
			url "s3://repo.unifiedapi.psu.edu/snapshots"
			credentials(AwsCredentials) {
				AWSCredentials credentials = DefaultAWSCredentialsProviderChain.getInstance().credentials
				accessKey credentials.AWSAccessKeyId
				secretKey credentials.AWSSecretKey
			}
		}
	}

	dependencies {
		testCompile 'junit:junit:4.12'
	}

	configurations {
		integrationTestCompile.extendsFrom testCompile
		integrationTestRuntime.extendsFrom testRuntime
	}

	configurations.all {
		resolutionStrategy {
			cacheDynamicVersionsFor 0, 'seconds'
			cacheChangingModulesFor 0, 'seconds'
		}
	}

	sourceSets {
		integrationTest {
			java {
				compileClasspath += main.output
				runtimeClasspath += main.output
				srcDir file('src/integration-test/java')
			}
		}
	}

	task integrationTest(type: Test) {
		testClassesDirs = sourceSets.integrationTest.output.classesDirs
		classpath = sourceSets.integrationTest.runtimeClasspath
	}

}

configure(subprojects.findAll { !it.name.endsWith("Utils") }) {
	apply plugin: 'jp.classmethod.aws.s3'
	apply plugin: 'jp.classmethod.aws.lambda'

	task buildZip(type: Zip) {
		from compileJava
		from processResources
		into('lib') {
			from configurations.runtime
		}
	}

	task uploadZip(type: AmazonS3FileUploadTask, dependsOn: buildZip) {
		file buildZip.archivePath
		bucketName "psu-unified-api-us-east-1"
		key "${project.name}.zip"
		overwrite true
	}

	task updateLambdaFunction(type: AWSLambdaUpdateFunctionCodeTask, dependsOn: uploadZip) {
		functionName project.name
		s3File new S3File(bucketName: uploadZip.bucketName, key: uploadZip.key)
	}

}